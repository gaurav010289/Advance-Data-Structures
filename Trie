struct Node{
    Node *links[26];
    bool end = false;
};
class Trie{
    Node *root;
    Trie(){
        root = new Node();
    }
    
    void insert(string word){
        Node *node = root;
        for(int i = 0;i<word.length();i++){
            if(!node->links[word[i]-'a']){
                node->links[word[i]-'a'] = new Node();
            }
            node = node->links[word[i]-'a'];
        }
        node->end = true;
    }
    
    void findWord(string word){
        Node* node = root;
        for(int i = 0;i<word.length();i++){
            if(!node->links[word[i]-'a']){
                return false;
            }
            node = node->links[word[i]-'a'];
        }
        return node->end;
    }
    
    void findPrefix(string word){
        Node *node = root;
        for(int i = 0;i<word.length();i++){
            if(!node->links[word[i]-'a']){
                return false;
            }
            node = node->links[word[i]-'a'];
        }
        return true;
    }
};
